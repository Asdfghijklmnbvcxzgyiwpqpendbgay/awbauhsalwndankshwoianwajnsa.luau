local Triplesixxx = {}
local ConfigData = {}
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

-- File system setup for config
local function setupConfig()
    if not isfolder("Walvy Community") then
        makefolder("Walvy Community")
    end
    if not isfolder("Walvy Community/Config") then
        makefolder("Walvy Community/Config")
    end
    local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
    local ConfigPath = "Walvy Community/Config/666_" .. GameName .. ".json"
    
    if isfile(ConfigPath) then
        local success, result = pcall(function()
            return HttpService:JSONDecode(readfile(ConfigPath))
        end)
        if success then
            ConfigData = result
        else
            warn("Failed to load config: " .. result)
        end
    end
end

-- Save config to file
local function SaveConfig()
    local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
    local ConfigPath = "Walvy Community/Config/666_" .. GameName .. ".json"
    local success, result = pcall(function()
        writefile(ConfigPath, HttpService:JSONEncode(ConfigData))
    end)
    if not success then
        warn("Failed to save config: " .. result)
    end
end

-- Icon table (simplified for brevity)
local Icons = {
    player    = "rbxassetid://12120698352",
    web       = "rbxassetid://137601480983962",
    bag       = "rbxassetid://8601111810",
    shop      = "rbxassetid://4985385964",
    cart      = "rbxassetid://128874923961846",
    plug      = "rbxassetid://137601480983962",
    settings  = "rbxassetid://70386228443175",
    loop      = "rbxassetid://122032243989747",
    gps       = "rbxassetid://17824309485",
    compas    = "rbxassetid://125300760963399",
    gamepad   = "rbxassetid://84173963561612",
    boss      = "rbxassetid://13132186360",
    scroll    = "rbxassetid://114127804740858",
    menu      = "rbxassetid://6340513838",
    crosshair = "rbxassetid://12614416478",
    user      = "rbxassetid://108483430622128",
    stat      = "rbxassetid://12094445329",
    eyes      = "rbxassetid://14321059114",
    sword     = "rbxassetid://82472368671405",
    discord   = "rbxassetid://94434236999817",
    star      = "rbxassetid://107005941750079",
    skeleton  = "rbxassetid://17313330026",
    payment   = "rbxassetid://18747025078",
    scan      = "rbxassetid://109869955247116",
    alert     = "rbxassetid://73186275216515",
    question  = "rbxassetid://17510196486",
    idea      = "rbxassetid://16833255748",
    strom     = "rbxassetid://13321880293",
    water     = "rbxassetid://100076212630732",
    dcs       = "rbxassetid://15310731934",
    start     = "rbxassetid://108886429866687",
    next      = "rbxassetid://12662718374",
    rod       = "rbxassetid://103247953194129",
    fish      = "rbxassetid://97167558235554",
}

-- Utility function for tweening
local function Tween(Object, Properties, Time, ...)
    local tweenInfo = TweenInfo.new(Time, ...)
    local tween = TweenService:Create(Object, tweenInfo, Properties)
    tween:Play()
    return tween
end

-- Create notification
function Triplesixxx:MakeNotify(NotifyConfig)
    local Title = NotifyConfig.Title or "Notification"
    local Description = NotifyConfig.Description or ""
    local Content = NotifyConfig.Content or ""
    local Color = NotifyConfig.Color or Color3.fromRGB(255, 255, 255)
    local Time = NotifyConfig.Time or 1
    local Delay = NotifyConfig.Delay or 3

    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = game.CoreGui
    local Frame = Instance.new("Frame")
    Frame.Size = UDim2.new(0, 300, 0, 100)
    Frame.Position = UDim2.new(1, -320, 0, 20)
    Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Frame.Parent = ScreenGui

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Text = Title
    TitleLabel.Size = UDim2.new(1, 0, 0, 20)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.TextColor3 = Color
    TitleLabel.Parent = Frame

    local DescriptionLabel = Instance.new("TextLabel")
    DescriptionLabel.Text = Description
    DescriptionLabel.Size = UDim2.new(1, 0, 0, 20)
    DescriptionLabel.Position = UDim2.new(0, 0, 0, 20)
    DescriptionLabel.BackgroundTransparency = 1
    DescriptionLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    DescriptionLabel.Parent = Frame

    local ContentLabel = Instance.new("TextLabel")
    ContentLabel.Text = Content
    ContentLabel.Size = UDim2.new(1, 0, 0, 60)
    ContentLabel.Position = UDim2.new(0, 0, 0, 40)
    ContentLabel.BackgroundTransparency = 1
    ContentLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    ContentLabel.Parent = Frame

    Tween(Frame, {Position = UDim2.new(1, -320, 0, 20)}, Time):Wait()
    wait(Delay)
    Tween(Frame, {Position = UDim2.new(1, 0, 0, 20)}, Time).Completed:Wait()
    ScreenGui:Destroy()
end

-- Create window
function Triplesixxx:Window(GuiConfig)
    if type(GuiConfig) ~= "table" then
        error("Window requires a configuration table")
    end

    local Title = GuiConfig.Title or "Triplesixxx GUI"
    local Footer = GuiConfig.Footer or "Powered by Triplesixxx"
    local Color = GuiConfig.Color or Color3.fromRGB(255, 0, 255)
    local TabWidth = GuiConfig["Tab Width"] or GuiConfig.TabWidth or 120
    local Version = GuiConfig.Version or "1.0"
    local Image = GuiConfig.Image or ""

    local GuiFunc = {}
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = game.CoreGui
    local DropShadowHolder = Instance.new("Frame")
    DropShadowHolder.Size = UDim2.new(0, 600, 0, 400)
    DropShadowHolder.Position = UDim2.new(0.5, -300, 0.5, -200)
    DropShadowHolder.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    DropShadowHolder.Parent = ScreenGui

    local MainFrame = Instance.new("Frame")
    MainFrame.Size = UDim2.new(1, 0, 1, 0)
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    MainFrame.Parent = DropShadowHolder

    local Topbar = Instance.new("Frame")
    Topbar.Size = UDim2.new(1, 0, 0, 30)
    Topbar.BackgroundColor3 = Color
    Topbar.Parent = MainFrame

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Text = Title
    TitleLabel.Size = UDim2.new(0, 200, 0, 30)
    TitleLabel.Position = UDim2.new(0, 10, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.Parent = Topbar

    local Close = Instance.new("TextButton")
    Close.Text = "X"
    Close.Size = UDim2.new(0, 30, 0, 30)
    Close.Position = UDim2.new(1, -30, 0, 0)
    Close.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    Close.Parent = Topbar

    local ScrollTab = Instance.new("ScrollingFrame")
    ScrollTab.Size = UDim2.new(0, TabWidth, 1, -30)
    ScrollTab.Position = UDim2.new(0, 0, 0, 30)
    ScrollTab.BackgroundTransparency = 1
    ScrollTab.Parent = MainFrame

    local Main = Instance.new("Frame")
    Main.Size = UDim2.new(1, -TabWidth, 1, -30)
    Main.Position = UDim2.new(0, TabWidth, 0, 30)
    Main.BackgroundTransparency = 1
    Main.Parent = MainFrame

    local FooterLabel = Instance.new("TextLabel")
    FooterLabel.Text = Footer
    FooterLabel.Size = UDim2.new(1, 0, 0, 20)
    FooterLabel.Position = UDim2.new(0, 0, 1, -20)
    FooterLabel.BackgroundTransparency = 1
    FooterLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    FooterLabel.Parent = MainFrame

    local ToggleButton = Instance.new("ImageButton")
    ToggleButton.Size = UDim2.new(0, 50, 0, 50)
    ToggleButton.Position = UDim2.new(0, 20, 0, 20)
    ToggleButton.Image = Image
    ToggleButton.Parent = ScreenGui

    Close.Activated:Connect(function()
        local ConfirmDialog = Instance.new("Frame")
        ConfirmDialog.Size = UDim2.new(0, 200, 0, 100)
        ConfirmDialog.Position = UDim2.new(0.5, -100, 0.5, -50)
        ConfirmDialog.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        ConfirmDialog.Parent = ScreenGui

        local ConfirmText = Instance.new("TextLabel")
        ConfirmText.Text = "Are you sure you want to close?"
        ConfirmText.Size = UDim2.new(1, 0, 0, 50)
        ConfirmText.BackgroundTransparency = 1
        ConfirmText.TextColor3 = Color3.fromRGB(255, 255, 255)
        ConfirmText.Parent = ConfirmDialog

        local YesButton = Instance.new("TextButton")
        YesButton.Text = "Yes"
        YesButton.Size = UDim2.new(0, 80, 0, 30)
        YesButton.Position = UDim2.new(0, 20, 0, 60)
        YesButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        YesButton.Parent = ConfirmDialog

        local NoButton = Instance.new("TextButton")
        NoButton.Text = "No"
        NoButton.Size = UDim2.new(0, 80, 0, 30)
        NoButton.Position = UDim2.new(0, 100, 0, 60)
        NoButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        NoButton.Parent = ConfirmDialog

        YesButton.Activated:Connect(function()
            ScreenGui:Destroy()
        end)
        NoButton.Activated:Connect(function()
            ConfirmDialog:Destroy()
        end)
    end)

    function GuiFunc:DestroyGui()
        ScreenGui:Destroy()
    end

    function GuiFunc:ToggleUI()
        DropShadowHolder.Visible = not DropShadowHolder.Visible
    end

    ToggleButton.Activated:Connect(function()
        GuiFunc:ToggleUI()
    end)

    function GuiFunc:AddTab(TabConfig)
        local TabFunc = {}
        local Name = TabConfig.Name or "Tab"
        local Icon = Icons[TabConfig.Icon] or ""

        local TabButton = Instance.new("TextButton")
        TabButton.Text = Name
        TabButton.Size = UDim2.new(1, 0, 0, 30)
        TabButton.Position = UDim2.new(0, 0, 0, #ScrollTab:GetChildren() * 30)
        TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        TabButton.Parent = ScrollTab

        local TabIcon = Instance.new("ImageLabel")
        TabIcon.Image = Icon
        TabIcon.Size = UDim2.new(0, 20, 0, 20)
        TabIcon.Position = UDim2.new(0, 5, 0, 5)
        TabIcon.BackgroundTransparency = 1
        TabIcon.Parent = TabButton

        local TabContent = Instance.new("Frame")
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.BackgroundTransparency = 1
        TabContent.Parent = Main
        TabContent.Visible = false

        TabButton.Activated:Connect(function()
            for _, tab in pairs(Main:GetChildren()) do
                tab.Visible = false
            end
            TabContent.Visible = true
        end)

        function TabFunc:AddSection(SectionName, AlwaysOpen)
            local SectionFunc = {}
            local SectionFrame = Instance.new("Frame")
            SectionFrame.Size = UDim2.new(1, 0, 0, 30)
            SectionFrame.Position = UDim2.new(0, 0, 0, #TabContent:GetChildren() * 30)
            SectionFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            SectionFrame.Parent = TabContent

            local SectionTitle = Instance.new("TextLabel")
            SectionTitle.Text = SectionName
            SectionTitle.Size = UDim2.new(1, 0, 0, 30)
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            SectionTitle.Parent = SectionFrame

            function SectionFunc:AddToggle(ToggleConfig)
                local ToggleTitle = ToggleConfig.Title or "Toggle"
                local ToggleContent = ToggleConfig.Content or ""
                local Default = ToggleConfig.Default or false
                local Callback = ToggleConfig.Callback or function() end
                local ConfigKey = "Toggle_" .. ToggleTitle:gsub(" ", "_")

                local ToggleFrame = Instance.new("Frame")
                ToggleFrame.Size = UDim2.new(1, 0, 0, 50)
                ToggleFrame.Position = UDim2.new(0, 0, 0, #SectionFrame:GetChildren() * 50)
                ToggleFrame.BackgroundTransparency = 1
                ToggleFrame.Parent = SectionFrame

                local ToggleButton = Instance.new("TextButton")
                ToggleButton.Text = Default and "On" or "Off"
                ToggleButton.Size = UDim2.new(0, 50, 0, 30)
                ToggleButton.Position = UDim2.new(1, -60, 0, 10)
                ToggleButton.BackgroundColor3 = Default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                ToggleButton.Parent = ToggleFrame

                local ToggleLabel = Instance.new("TextLabel")
                ToggleLabel.Text = ToggleTitle .. "\n" .. ToggleContent
                ToggleLabel.Size = UDim2.new(1, -60, 0, 50)
                ToggleLabel.BackgroundTransparency = 1
                ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                ToggleLabel.Parent = ToggleFrame

                ConfigData[ConfigKey] = ConfigData[ConfigKey] or Default
                ToggleButton.Text = ConfigData[ConfigKey] and "On" or "Off"
                ToggleButton.BackgroundColor3 = ConfigData[ConfigKey] and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)

                ToggleButton.Activated:Connect(function()
                    ConfigData[ConfigKey] = not ConfigData[ConfigKey]
                    ToggleButton.Text = ConfigData[ConfigKey] and "On" or "Off"
                    ToggleButton.BackgroundColor3 = ConfigData[ConfigKey] and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                    SaveConfig()
                    pcall(Callback, ConfigData[ConfigKey])
                end)
            end

            function SectionFunc:AddSlider(SliderConfig)
                local SliderTitle = SliderConfig.Title or "Slider"
                local SliderContent = SliderConfig.Content or ""
                local Min = SliderConfig.Min or 0
                local Max = SliderConfig.Max or 100
                local Increment = SliderConfig.Increment or 1
                local Default = SliderConfig.Default or Min
                local Callback = SliderConfig.Callback or function() end
                local ConfigKey = "Slider_" .. SliderTitle:gsub(" ", "_")

                local SliderFrame = Instance.new("Frame")
                SliderFrame.Size = UDim2.new(1, 0, 0, 50)
                SliderFrame.Position = UDim2.new(0, 0, 0, #SectionFrame:GetChildren() * 50)
                SliderFrame.BackgroundTransparency = 1
                SliderFrame.Parent = SectionFrame

                local SliderLabel = Instance.new("TextLabel")
                SliderLabel.Text = SliderTitle .. "\n" .. SliderContent
                SliderLabel.Size = UDim2.new(1, -100, 0, 50)
                SliderLabel.BackgroundTransparency = 1
                SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderLabel.Parent = SliderFrame

                local SliderBar = Instance.new("Frame")
                SliderBar.Size = UDim2.new(0, 100, 0, 10)
                SliderBar.Position = UDim2.new(1, -110, 0, 20)
                SliderBar.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
                SliderBar.Parent = SliderFrame

                local SliderValue = Instance.new("TextLabel")
                SliderValue.Text = tostring(Default)
                SliderValue.Size = UDim2.new(0, 50, 0, 20)
                SliderValue.Position = UDim2.new(1, -60, 0, 0)
                SliderValue.BackgroundTransparency = 1
                SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderValue.Parent = SliderFrame

                ConfigData[ConfigKey] = ConfigData[ConfigKey] or Default
                SliderValue.Text = tostring(ConfigData[ConfigKey])

                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local connection
                        connection = RunService.RenderStepped:Connect(function()
                            local mouse = UserInputService:GetMouseLocation()
                            local relative = math.clamp((mouse.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                            local value = math.floor(Min + (Max - Min) * relative / Increment) * Increment
                            ConfigData[ConfigKey] = value
                            SliderValue.Text = tostring(value)
                            SaveConfig()
                            pcall(Callback, value)
                        end)
                        UserInputService.InputEnded:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                connection:Disconnect()
                            end
                        end)
                    end
                end)
            end

            -- Add other element functions (Input, Dropdown, etc.) similarly
            function SectionFunc:AddInput(InputConfig)
                local InputTitle = InputConfig.Title or "Input"
                local InputContent = InputConfig.Content or ""
                local Default = InputConfig.Default or ""
                local Callback = InputConfig.Callback or function() end
                local ConfigKey = "Input_" .. InputTitle:gsub(" ", "_")

                local InputFrame = Instance.new("Frame")
                InputFrame.Size = UDim2.new(1, 0, 0, 50)
                InputFrame.Position = UDim2.new(0, 0, 0, #SectionFrame:GetChildren() * 50)
                InputFrame.BackgroundTransparency = 1
                InputFrame.Parent = SectionFrame

                local InputLabel = Instance.new("TextLabel")
                InputLabel.Text = InputTitle .. "\n" .. InputContent
                InputLabel.Size = UDim2.new(1, -100, 0, 50)
                InputLabel.BackgroundTransparency = 1
                InputLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                InputLabel.Parent = InputFrame

                local TextBox = Instance.new("TextBox")
                TextBox.Size = UDim2.new(0, 100, 0, 30)
                TextBox.Position = UDim2.new(1, -110, 0, 10)
                TextBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                TextBox.Text = Default
                TextBox.Parent = InputFrame

                ConfigData[ConfigKey] = ConfigData[ConfigKey] or Default
                TextBox.Text = ConfigData[ConfigKey]

                TextBox.FocusLost:Connect(function()
                    ConfigData[ConfigKey] = TextBox.Text
                    SaveConfig()
                    pcall(Callback, TextBox.Text)
                end)
            end

            function SectionFunc:AddDropdown(DropdownConfig)
                local DropdownTitle = DropdownConfig.Title or "Dropdown"
                local DropdownContent = DropdownConfig.Content or ""
                local Options = DropdownConfig.Options or {}
                local Default = DropdownConfig.Default or (DropdownConfig.Multi and {} or Options[1] and Options[1].Value)
                local Multi = DropdownConfig.Multi or false
                local Callback = DropdownConfig.Callback or function() end
                local ConfigKey = "Dropdown_" .. DropdownTitle:gsub(" ", "_")

                local DropdownFrame = Instance.new("Frame")
                DropdownFrame.Size = UDim2.new(1, 0, 0, 50)
                DropdownFrame.Position = UDim2.new(0, 0, 0, #SectionFrame:GetChildren() * 50)
                DropdownFrame.BackgroundTransparency = 1
                DropdownFrame.Parent = SectionFrame

                local DropdownLabel = Instance.new("TextLabel")
                DropdownLabel.Text = DropdownTitle .. "\n" .. DropdownContent
                DropdownLabel.Size = UDim2.new(1, -100, 0, 50)
                DropdownLabel.BackgroundTransparency = 1
                DropdownLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                DropdownLabel.Parent = DropdownFrame

                local DropdownButton = Instance.new("TextButton")
                DropdownButton.Text = Multi and table.concat(Default, ", ") or (Default or "Select")
                DropdownButton.Size = UDim2.new(0, 100, 0, 30)
                DropdownButton.Position = UDim2.new(1, -110, 0, 10)
                DropdownButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                DropdownButton.Parent = DropdownFrame

                ConfigData[ConfigKey] = ConfigData[ConfigKey] or Default

                DropdownButton.Activated:Connect(function()
                    local DropdownMenu = Instance.new("Frame")
                    DropdownMenu.Size = UDim2.new(0, 100, 0, #Options * 30)
                    DropdownMenu.Position = UDim2.new(1, -110, 0, 40)
                    DropdownMenu.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                    DropdownMenu.Parent = DropdownFrame

                    for i, option in ipairs(Options) do
                        local OptionButton = Instance.new("TextButton")
                        OptionButton.Text = option.Label
                        OptionButton.Size = UDim2.new(1, 0, 0, 30)
                        OptionButton.Position = UDim2.new(0, 0, 0, (i-1) * 30)
                        OptionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                        OptionButton.Parent = DropdownMenu

                        OptionButton.Activated:Connect(function()
                            if Multi then
                                ConfigData[ConfigKey] = ConfigData[ConfigKey] or {}
                                if table.find(ConfigData[ConfigKey], option.Value) then
                                    table.remove(ConfigData[ConfigKey], table.find(ConfigData[ConfigKey], option.Value))
                                else
                                    table.insert(ConfigData[ConfigKey], option.Value)
                                end
                                DropdownButton.Text = table.concat(ConfigData[ConfigKey], ", ")
                            else
                                ConfigData[ConfigKey] = option.Value
                                DropdownButton.Text = option.Label
                                DropdownMenu:Destroy()
                            end
                            SaveConfig()
                            pcall(Callback, ConfigData[ConfigKey])
                        end)
                    end
                end)
            end

            -- Add other element functions as needed
            return SectionFunc
        end

        return TabFunc
    end

    function GuiFunc:LoadConfigElements()
        for _, tab in pairs(Main:GetChildren()) do
            for _, section in pairs(tab:GetChildren()) do
                for _, element in pairs(section:GetChildren()) do
                    if element:IsA("Frame") then
                        for _, child in pairs(element:GetChildren()) do
                            if child:IsA("TextButton") or child:IsA("TextBox") then
                                local ConfigKey = child.Parent.Name
                                if ConfigData[ConfigKey] ~= nil then
                                    if child:IsA("TextButton") then
                                        child.Text = ConfigData[ConfigKey] and "On" or "Off"
                                        child.BackgroundColor3 = ConfigData[ConfigKey] and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                                    elseif child:IsA("TextBox") then
                                        child.Text = ConfigData[ConfigKey]
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    setupConfig()
    return GuiFunc
end

-- Initialize config
setupConfig()

return Triplesixxx
